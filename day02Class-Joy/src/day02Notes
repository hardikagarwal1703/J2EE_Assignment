ITC (Inter Thread Communication) with sleep() : classic deadlock problem
example : 

started thrd  -- Producer
w entered --- Producer
Write Data Emp [id=1, sal=100.0]
w exited --- Producer : dataReady : true
Press enter to exit
started thrd  -- Consumer
r entered --- Consumer
Read  Data Emp [id=1, sal=100.0]
r exited --- Consumer : dataReady : false
w entered --- Producer
Write Data Emp [id=2, sal=200.0]
w exited --- Producer : dataReady : true
w entered --- Producer : blocked on sleep inside the monitor
Consumer : blocked on monitor (unable to acquire the lock) - outside the monitor

Result : DEADLOCK !!
	- Monitor is busy

-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x

-> Only wait() API will resolve this deadlock, stale data, data loss.

-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x

ITC with wait() : deadlock problem
example :

started thrd  -- Producer
w entered --- Producer
Write Data Emp [id=1, sal=100.0]
w exited --- Producer : dataReady : true
w entered --- Producer : blocked on wait() outside monitor
Press enter to exit
started thrd  -- Consumer
r entered --- Consumer
Read  Data Emp [id=1, sal=100.0]
r exited --- Consumer : dataReady : false
r entered --- Consumer : blocked on wait() outside monitor

Result : DEADLOCK !!
	- Both thread are outside monitor and waiting for interrupt.

-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x

-> notify() API will resolve this deadlock.

-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x

ITC with wait() and notify()
example : 

started thrd  -- Producer
w entered --- Producer
Write Data Emp [id=1, sal=100.0]
w exited --- Producer
Press enter to exit
started thrd  -- Consumer
r entered --- Consumer
Read  Data Emp [id=1, sal=100.0]
r exited --- Consumer
w entered --- Producer
Write Data Emp [id=2, sal=200.0]
w exited --- Producer
w entered --- Producer
thrd over -- Consumer

Result : Running.

-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x

## CLONING

- copy of reference and not object.
- implements cloneable interface.
- we can overridden.
- refer shallow and deep copy codes.
- we cannot change the scope but we can widen the scope.

-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x-----x

## REFLECTION

- refer p1.
- refer reflection readme.